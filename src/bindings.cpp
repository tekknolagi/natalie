// DO NOT EDIT THIS FILE BY HAND!
// This file is generated by the lib/natalie/compiler/binding_gen.rb script.
// Run `make src/bindings.cpp` to regenerate this file.

#include "natalie.hpp"

namespace Natalie {

Value *ArrayValue_square_new_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    
    auto return_value = ArrayValue::square_new(env, argc, args);
    return return_value;
}

Value *ArrayValue_add_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->add(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_sub_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->sub(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_ltlt_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->ltlt(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_cmp_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->cmp(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_eql_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->eql(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_eq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_ref_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->ref(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *ArrayValue_refeq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2, 3);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->refeq(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr, argc > 2 ? args[2] : nullptr);
    return return_value;
}

Value *ArrayValue_any_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    ArrayValue *self = self_value->as_array();
    auto return_value = self->any(env, argc, args, block);
    return return_value;
}

Value *ArrayValue_each_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->each(env, block);
    return return_value;
}

Value *ArrayValue_each_with_index_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->each_with_index(env, block);
    return return_value;
}

Value *ArrayValue_is_empty_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->is_empty();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ArrayValue_select_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->select(env, block);
    return return_value;
}

Value *ArrayValue_first_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->first(env);
    return return_value;
}

Value *ArrayValue_include_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->include(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 2);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *ArrayValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *ArrayValue_join_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->join(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_last_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->last(env);
    return return_value;
}

Value *ArrayValue_size_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->size();
    return new IntegerValue { env, return_value };
}

Value *ArrayValue_map_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->map(env, block);
    return return_value;
}

Value *ArrayValue_pop_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->pop(env);
    return return_value;
}

Value *ArrayValue_select_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->select(env, block);
    return return_value;
}

Value *ArrayValue_shift_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->shift(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ArrayValue_size_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->size();
    return new IntegerValue { env, return_value };
}

Value *ArrayValue_sort_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->sort(env);
    return return_value;
}

Value *ArrayValue_to_ary_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->to_ary();
    return return_value;
}

Value *ArrayValue_to_ary_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->to_ary();
    return return_value;
}

Value *ArrayValue_inspect_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *ArrayValue_sample_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ArrayValue *self = self_value->as_array();
    auto return_value = self->sample(env);
    return return_value;
}

Value *Value_send_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    Value *self = self_value;
    auto return_value = self->send(env, argc, args, block);
    return return_value;
}

Value *Value_is_falsey_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    Value *self = self_value;
    auto return_value = self->is_falsey();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *Value_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    Value *self = self_value;
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *Value_eq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    Value *self = self_value;
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *Value_neq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    Value *self = self_value;
    auto return_value = self->neq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *Value_instance_eval_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    Value *self = self_value;
    auto return_value = self->instance_eval(env, argc > 0 ? args[0] : nullptr, block);
    return return_value;
}

Value *ClassValue_new_method_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    auto return_value = ClassValue::new_method(env, argc > 0 ? args[0] : nullptr, block);
    return return_value;
}

Value *ClassValue_superclass_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ClassValue *self = self_value->as_class();
    auto return_value = self->superclass();
    if (return_value) { return return_value; } else { return env->nil_obj(); }
}

Value *EncodingValue_list_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    auto return_value = EncodingValue::list(env);
    return return_value;
}

Value *EncodingValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    EncodingValue *self = self_value->as_encoding();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *EncodingValue_name_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    EncodingValue *self = self_value->as_encoding();
    auto return_value = self->name(env);
    return return_value;
}

Value *EncodingValue_names_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    EncodingValue *self = self_value->as_encoding();
    auto return_value = self->names(env);
    return return_value;
}

Value *EnvValue_inspect_singleton_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    EnvValue *self = self_value->as_env_value_for_method_binding();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *EnvValue_ref_singleton_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    EnvValue *self = self_value->as_env_value_for_method_binding();
    auto return_value = self->ref(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *EnvValue_refeq_singleton_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2);
    EnvValue *self = self_value->as_env_value_for_method_binding();
    auto return_value = self->refeq(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *ExceptionValue_backtrace_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ExceptionValue *self = self_value->as_exception();
    auto return_value = self->backtrace(env);
    return return_value;
}

Value *ExceptionValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    ExceptionValue *self = self_value->as_exception();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ExceptionValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ExceptionValue *self = self_value->as_exception();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *ExceptionValue_message_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ExceptionValue *self = self_value->as_exception();
    auto return_value = self->message(env);
    return return_value;
}

Value *FalseValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FalseValue *self = self_value->as_false();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *FalseValue_to_s_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FalseValue *self = self_value->as_false();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *FileValue_expand_path_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    auto return_value = FileValue::expand_path(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *FileValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    FileValue *self = self_value->as_file();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr, block);
    return return_value;
}

Value *FloatValue_mod_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->mod(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_mul_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->mul(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_pow_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->pow(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_add_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->add(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_uplus_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->uplus();
    return return_value;
}

Value *FloatValue_sub_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->sub(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_uminus_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->uminus();
    return return_value;
}

Value *FloatValue_div_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->div(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_lt_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->lt(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_lte_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->lte(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_cmp_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->cmp(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_eq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_gt_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->gt(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_gte_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->gte(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_abs_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->abs(env);
    return return_value;
}

Value *FloatValue_arg_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->arg(env);
    return return_value;
}

Value *FloatValue_arg_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->arg(env);
    return return_value;
}

Value *FloatValue_ceil_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->ceil(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_coerce_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->coerce(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_divmod_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->divmod(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_eql_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->eql(argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_div_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->div(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_is_finite_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->is_finite();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_floor_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->floor(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_is_infinite_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->is_infinite(env);
    return return_value;
}

Value *FloatValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *FloatValue_abs_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->abs(env);
    return return_value;
}

Value *FloatValue_mod_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->mod(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_is_nan_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->is_nan();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_is_negative_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->is_negative();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_next_float_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->next_float(env);
    return return_value;
}

Value *FloatValue_arg_binding2(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->arg(env);
    return return_value;
}

Value *FloatValue_is_positive_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->is_positive();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *FloatValue_prev_float_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->prev_float(env);
    return return_value;
}

Value *FloatValue_div_binding2(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->div(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_round_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->round(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_to_f_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_f();
    return return_value;
}

Value *FloatValue_to_i_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_i(env);
    return return_value;
}

Value *FloatValue_to_i_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_i(env);
    return return_value;
}

Value *FloatValue_to_s_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *FloatValue_truncate_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    FloatValue *self = self_value->as_float();
    auto return_value = self->truncate(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *FloatValue_is_zero_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    FloatValue *self = self_value->as_float();
    auto return_value = self->is_zero();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *HashValue_square_new_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    
    auto return_value = HashValue::square_new(env, argc, args);
    return return_value;
}

Value *HashValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *HashValue_eq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *HashValue_ref_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->ref(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *HashValue_refeq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2);
    HashValue *self = self_value->as_hash();
    auto return_value = self->refeq(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *HashValue_delete_key_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->delete_key(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *HashValue_each_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->each(env, block);
    return return_value;
}

Value *HashValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr, block);
    return return_value;
}

Value *HashValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *HashValue_has_key_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->has_key(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *HashValue_has_key_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    HashValue *self = self_value->as_hash();
    auto return_value = self->has_key(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *HashValue_keys_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->keys(env);
    return return_value;
}

Value *HashValue_size_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->size(env);
    return return_value;
}

Value *HashValue_sort_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->sort(env);
    return return_value;
}

Value *HashValue_inspect_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *HashValue_values_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->values(env);
    return return_value;
}

Value *HashValue_default_value_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->default_value(env);
    return return_value;
}

Value *HashValue_default_proc_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    HashValue *self = self_value->as_hash();
    auto return_value = self->default_proc(env);
    return return_value;
}

Value *IntegerValue_mod_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->mod(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_bitwise_and_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->bitwise_and(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_mul_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->mul(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_pow_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->pow(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_add_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->add(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_sub_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->sub(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_div_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->div(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_cmp_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->cmp(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *Value_neq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    Value *self = self_value;
    auto return_value = self->neq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_lt_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->lt(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_lte_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->lte(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_gt_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->gt(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_gte_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->gte(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_eqeqeq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->eqeqeq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_abs_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->abs(env);
    return return_value;
}

Value *IntegerValue_chr_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->chr(env);
    return return_value;
}

Value *IntegerValue_coerce_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->coerce(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_eql_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->eql(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_is_even_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->is_even();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *IntegerValue_is_odd_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->is_odd();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IntegerValue_succ_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->succ(env);
    return return_value;
}

Value *IntegerValue_times_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->times(env, block);
    return return_value;
}

Value *IntegerValue_to_i_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->to_i();
    return return_value;
}

Value *IntegerValue_to_s_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *IntegerValue_bitwise_or_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->bitwise_or(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IntegerValue_is_zero_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IntegerValue *self = self_value->as_integer();
    auto return_value = self->is_zero();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *IoValue_close_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IoValue *self = self_value->as_io();
    auto return_value = self->close(env);
    return return_value;
}

Value *IoValue_fileno_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    IoValue *self = self_value->as_io();
    auto return_value = self->fileno();
    return new IntegerValue { env, return_value };
}

Value *IoValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    IoValue *self = self_value->as_io();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IoValue_print_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    IoValue *self = self_value->as_io();
    auto return_value = self->print(env, argc, args);
    return return_value;
}

Value *IoValue_puts_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    IoValue *self = self_value->as_io();
    auto return_value = self->puts(env, argc, args);
    return return_value;
}

Value *IoValue_read_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    IoValue *self = self_value->as_io();
    auto return_value = self->read(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *IoValue_seek_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    IoValue *self = self_value->as_io();
    auto return_value = self->seek(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *IoValue_write_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    IoValue *self = self_value->as_io();
    auto return_value = self->write(env, argc, args);
    return return_value;
}

Value *KernelModule_Array_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->Array(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *KernelModule_at_exit_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->at_exit(env, block);
    return return_value;
}

Value *KernelModule_block_given_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->block_given(env, block);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *KernelModule_klass_obj_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->klass_obj(env);
    return return_value;
}

Value *KernelModule_cur_dir_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->cur_dir(env);
    return return_value;
}

Value *KernelModule_define_singleton_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->define_singleton_method(env, argc > 0 ? args[0] : nullptr, block);
    return return_value;
}

Value *KernelModule_dup_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->dup(env);
    return return_value;
}

Value *KernelModule_equal_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->equal(argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *KernelModule_equal_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->equal(argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *KernelModule_exit_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->exit(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *KernelModule_freeze_obj_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->freeze_obj(env);
    return return_value;
}

Value *KernelModule_get_usage_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->get_usage(env);
    return return_value;
}

Value *KernelModule_hash_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->hash(env);
    return return_value;
}

Value *KernelModule_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *KernelModule_instance_variable_get_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->instance_variable_get(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *KernelModule_instance_variable_set_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->instance_variable_set(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *KernelModule_ivars_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->ivars(env);
    return return_value;
}

Value *KernelModule_is_a_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->is_a(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *KernelModule_is_nil_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->is_nil();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *KernelModule_lambda_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->lambda(env, block);
    return return_value;
}

Value *KernelModule_loop_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->loop(env, block);
    return return_value;
}

Value *KernelModule_this_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->this_method(env);
    return return_value;
}

Value *KernelModule_methods_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->methods(env);
    return return_value;
}

Value *KernelModule_methods_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->methods(env);
    return return_value;
}

Value *KernelModule_object_id_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->object_id(env);
    return return_value;
}

Value *KernelModule_p_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->p(env, argc, args);
    return return_value;
}

Value *KernelModule_print_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->print(env, argc, args);
    return return_value;
}

Value *KernelModule_proc_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->proc(env, block);
    return return_value;
}

Value *KernelModule_puts_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->puts(env, argc, args);
    return return_value;
}

Value *KernelModule_raise_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->raise(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *KernelModule_respond_to_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->respond_to(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *Value_send_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    Value *self = self_value;
    auto return_value = self->send(env, argc, args, block);
    return return_value;
}

Value *KernelModule_singleton_class_obj_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->singleton_class_obj(env);
    return return_value;
}

Value *KernelModule_sleep_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->sleep(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *KernelModule_tap_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->tap(env, block);
    return return_value;
}

Value *MatchDataValue_size_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    MatchDataValue *self = self_value->as_match_data();
    auto return_value = self->size();
    return new IntegerValue { env, return_value };
}

Value *MatchDataValue_size_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    MatchDataValue *self = self_value->as_match_data();
    auto return_value = self->size();
    return new IntegerValue { env, return_value };
}

Value *MatchDataValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    MatchDataValue *self = self_value->as_match_data();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *MatchDataValue_ref_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    MatchDataValue *self = self_value->as_match_data();
    auto return_value = self->ref(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ModuleValue_eqeqeq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->eqeqeq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ModuleValue_alias_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->alias_method(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *ModuleValue_ancestors_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->ancestors(env);
    return return_value;
}

Value *ModuleValue_attr_reader_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->attr_reader(env, argc, args);
    return return_value;
}

Value *ModuleValue_attr_accessor_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->attr_accessor(env, argc, args);
    return return_value;
}

Value *ModuleValue_attr_reader_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->attr_reader(env, argc, args);
    return return_value;
}

Value *ModuleValue_attr_writer_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->attr_writer(env, argc, args);
    return return_value;
}

Value *ModuleValue_module_eval_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->module_eval(env, block);
    return return_value;
}

Value *ModuleValue_const_defined_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->const_defined(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ModuleValue_define_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->define_method(env, argc > 0 ? args[0] : nullptr, block);
    return return_value;
}

Value *ModuleValue_extend_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->extend(env, argc, args);
    return return_value;
}

Value *ModuleValue_include_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->include(env, argc, args);
    return return_value;
}

Value *ModuleValue_does_include_module_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->does_include_module(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ModuleValue_included_modules_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->included_modules(env);
    return return_value;
}

Value *ModuleValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *ModuleValue_is_method_defined_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->is_method_defined(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ModuleValue_module_eval_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->module_eval(env, block);
    return return_value;
}

Value *ModuleValue_name_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->name(env);
    return return_value;
}

Value *ModuleValue_prepend_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC_AT_LEAST(1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->prepend(env, argc, args);
    return return_value;
}

Value *ModuleValue_private_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->private_method(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ModuleValue_protected_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->protected_method(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ModuleValue_public_method_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    ModuleValue *self = self_value->as_module();
    auto return_value = self->public_method(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *NilValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    NilValue *self = self_value->as_nil();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *NilValue_to_a_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    NilValue *self = self_value->as_nil();
    auto return_value = self->to_a(env);
    return return_value;
}

Value *NilValue_to_i_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    NilValue *self = self_value->as_nil();
    auto return_value = self->to_i(env);
    return return_value;
}

Value *NilValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    NilValue *self = self_value->as_nil();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *Value_is_nil_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    Value *self = self_value;
    auto return_value = self->is_nil();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ParserValue_parse_singleton_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    ParserValue *self = self_value->as_parser_value_for_method_binding();
    auto return_value = self->parse(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *ProcValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ProcValue *self = self_value->as_proc();
    auto return_value = self->initialize(env, block);
    return return_value;
}

Value *ProcValue_call_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    
    ProcValue *self = self_value->as_proc();
    auto return_value = self->call(env, argc, args, block);
    return return_value;
}

Value *ProcValue_is_lambda_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    ProcValue *self = self_value->as_proc();
    auto return_value = self->is_lambda();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *ProcessModule_pid_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    auto return_value = ProcessModule::pid(env);
    return return_value;
}

Value *RangeValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2, 3);
    RangeValue *self = self_value->as_range();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr, argc > 2 ? args[2] : nullptr);
    return return_value;
}

Value *RangeValue_begin_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->begin();
    return return_value;
}

Value *RangeValue_begin_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->begin();
    return return_value;
}

Value *RangeValue_end_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->end();
    return return_value;
}

Value *RangeValue_end_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->end();
    return return_value;
}

Value *RangeValue_exclude_end_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->exclude_end();
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *RangeValue_to_a_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->to_a(env);
    return return_value;
}

Value *RangeValue_each_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->each(env, block);
    return return_value;
}

Value *RangeValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RangeValue *self = self_value->as_range();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *RangeValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RangeValue *self = self_value->as_range();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *RangeValue_eqeqeq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RangeValue *self = self_value->as_range();
    auto return_value = self->eqeqeq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *RangeValue_eqeqeq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RangeValue *self = self_value->as_range();
    auto return_value = self->eqeqeq(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *RegexpValue_compile_static_binding(Env *env, Value *, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    auto return_value = RegexpValue::compile(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *RegexpValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RegexpValue *self = self_value->as_regexp();
    auto return_value = self->eq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *RegexpValue_eqeqeq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RegexpValue *self = self_value->as_regexp();
    auto return_value = self->eqeqeq(env, argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *RegexpValue_eqtilde_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RegexpValue *self = self_value->as_regexp();
    auto return_value = self->eqtilde(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *RegexpValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    RegexpValue *self = self_value->as_regexp();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *RegexpValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    RegexpValue *self = self_value->as_regexp();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *RegexpValue_match_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    RegexpValue *self = self_value->as_regexp();
    auto return_value = self->match(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_mul_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->mul(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_add_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->add(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_ltlt_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->ltlt(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_cmp_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->cmp(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_eq_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->eq(argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *StringValue_eq_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->eq(argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *StringValue_eqtilde_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->eqtilde(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_ref_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->ref(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_bytes_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->bytes(env);
    return return_value;
}

Value *StringValue_chars_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->chars(env);
    return return_value;
}

Value *StringValue_encode_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->encode(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_encoding_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->encoding(env);
    return return_value;
}

Value *StringValue_eq_binding2(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->eq(argc > 0 ? args[0] : nullptr);
    if (return_value) { return env->true_obj(); } else { return env->false_obj(); }
}

Value *StringValue_force_encoding_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->force_encoding(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_index_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->index(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_initialize_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    StringValue *self = self_value->as_string();
    auto return_value = self->initialize(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *StringValue_length_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->length();
    return new IntegerValue { env, return_value };
}

Value *StringValue_ljust_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1, 2);
    StringValue *self = self_value->as_string();
    auto return_value = self->ljust(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *StringValue_match_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    StringValue *self = self_value->as_string();
    auto return_value = self->match(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_ord_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->ord(env);
    return return_value;
}

Value *StringValue_size_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->size(env);
    return return_value;
}

Value *StringValue_split_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    StringValue *self = self_value->as_string();
    auto return_value = self->split(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_sub_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(2);
    StringValue *self = self_value->as_string();
    auto return_value = self->sub(env, argc > 0 ? args[0] : nullptr, argc > 1 ? args[1] : nullptr);
    return return_value;
}

Value *StringValue_successive_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->successive(env);
    return return_value;
}

Value *StringValue_to_i_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0, 1);
    StringValue *self = self_value->as_string();
    auto return_value = self->to_i(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *StringValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->to_s();
    return return_value;
}

Value *StringValue_to_str_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->to_str();
    return return_value;
}

Value *StringValue_to_sym_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    StringValue *self = self_value->as_string();
    auto return_value = self->to_sym(env);
    return return_value;
}

Value *SymbolValue_cmp_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(1);
    SymbolValue *self = self_value->as_symbol();
    auto return_value = self->cmp(env, argc > 0 ? args[0] : nullptr);
    return return_value;
}

Value *SymbolValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    SymbolValue *self = self_value->as_symbol();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *SymbolValue_inspect_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    SymbolValue *self = self_value->as_symbol();
    auto return_value = self->inspect(env);
    return return_value;
}

Value *SymbolValue_to_proc_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    SymbolValue *self = self_value->as_symbol();
    auto return_value = self->to_proc(env);
    return return_value;
}

Value *SymbolValue_to_s_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    SymbolValue *self = self_value->as_symbol();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *TrueValue_to_s_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    TrueValue *self = self_value->as_true();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *TrueValue_to_s_binding1(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    TrueValue *self = self_value->as_true();
    auto return_value = self->to_s(env);
    return return_value;
}

Value *KernelModule_main_obj_inspect_singleton_binding(Env *env, Value *self_value, ssize_t argc, Value **args, Block *block) {
    NAT_ASSERT_ARGC(0);
    KernelModule *self = self_value->as_kernel_module_for_method_binding();
    auto return_value = self->main_obj_inspect(env);
    return return_value;
}

void init_bindings(Env *env) {
    Value *Array = env->Object()->const_find(env, "Array");
    Array->define_singleton_method(env, "[]", ArrayValue_square_new_static_binding);
    Array->define_method(env, "+", ArrayValue_add_binding);
    Array->define_method(env, "-", ArrayValue_sub_binding);
    Array->define_method(env, "<<", ArrayValue_ltlt_binding);
    Array->define_method(env, "<=>", ArrayValue_cmp_binding);
    Array->define_method(env, "eql?", ArrayValue_eql_binding);
    Array->define_method(env, "==", ArrayValue_eq_binding);
    Array->define_method(env, "===", ArrayValue_eq_binding1);
    Array->define_method(env, "[]", ArrayValue_ref_binding);
    Array->define_method(env, "[]=", ArrayValue_refeq_binding);
    Array->define_method(env, "any?", ArrayValue_any_binding);
    Array->define_method(env, "each", ArrayValue_each_binding);
    Array->define_method(env, "each_with_index", ArrayValue_each_with_index_binding);
    Array->define_method(env, "empty?", ArrayValue_is_empty_binding);
    Array->define_method(env, "filter", ArrayValue_select_binding);
    Array->define_method(env, "first", ArrayValue_first_binding);
    Array->define_method(env, "include?", ArrayValue_include_binding);
    Array->define_method(env, "initialize", ArrayValue_initialize_binding);
    Array->define_method(env, "inspect", ArrayValue_inspect_binding);
    Array->define_method(env, "join", ArrayValue_join_binding);
    Array->define_method(env, "last", ArrayValue_last_binding);
    Array->define_method(env, "length", ArrayValue_size_binding);
    Array->define_method(env, "map", ArrayValue_map_binding);
    Array->define_method(env, "pop", ArrayValue_pop_binding);
    Array->define_method(env, "select", ArrayValue_select_binding1);
    Array->define_method(env, "shift", ArrayValue_shift_binding);
    Array->define_method(env, "size", ArrayValue_size_binding1);
    Array->define_method(env, "sort", ArrayValue_sort_binding);
    Array->define_method(env, "to_a", ArrayValue_to_ary_binding);
    Array->define_method(env, "to_ary", ArrayValue_to_ary_binding1);
    Array->define_method(env, "to_s", ArrayValue_inspect_binding1);
    Array->define_method(env, "sample", ArrayValue_sample_binding);
    Value *BasicObject = env->Object()->const_find(env, "BasicObject");
    BasicObject->define_method(env, "__send__", Value_send_binding);
    BasicObject->define_method(env, "!", Value_is_falsey_binding);
    BasicObject->define_method(env, "==", Value_eq_binding);
    BasicObject->define_method(env, "equal?", Value_eq_binding1);
    BasicObject->define_method(env, "!=", Value_neq_binding);
    BasicObject->define_method(env, "instance_eval", Value_instance_eval_binding);
    Value *Class = env->Object()->const_find(env, "Class");
    Class->define_singleton_method(env, "new", ClassValue_new_method_static_binding);
    Class->define_method(env, "superclass", ClassValue_superclass_binding);
    Value *Encoding = env->Object()->const_find(env, "Encoding");
    Encoding->define_singleton_method(env, "list", EncodingValue_list_static_binding);
    Encoding->define_method(env, "inspect", EncodingValue_inspect_binding);
    Encoding->define_method(env, "name", EncodingValue_name_binding);
    Encoding->define_method(env, "names", EncodingValue_names_binding);
    Value *ENV = env->Object()->const_find(env, "ENV");
    ENV->define_singleton_method(env, "inspect", EnvValue_inspect_singleton_binding);
    ENV->define_singleton_method(env, "[]", EnvValue_ref_singleton_binding);
    ENV->define_singleton_method(env, "[]=", EnvValue_refeq_singleton_binding);
    Value *Exception = env->Object()->const_find(env, "Exception");
    Exception->define_method(env, "backtrace", ExceptionValue_backtrace_binding);
    Exception->define_method(env, "initialize", ExceptionValue_initialize_binding);
    Exception->define_method(env, "inspect", ExceptionValue_inspect_binding);
    Exception->define_method(env, "message", ExceptionValue_message_binding);
    Value *FalseClass = env->Object()->const_find(env, "FalseClass");
    FalseClass->define_method(env, "inspect", FalseValue_to_s_binding);
    FalseClass->define_method(env, "to_s", FalseValue_to_s_binding1);
    Value *File = env->Object()->const_find(env, "File");
    File->define_singleton_method(env, "expand_path", FileValue_expand_path_static_binding);
    File->define_method(env, "initialize", FileValue_initialize_binding);
    Value *Float = env->Object()->const_find(env, "Float");
    Float->define_method(env, "%", FloatValue_mod_binding);
    Float->define_method(env, "*", FloatValue_mul_binding);
    Float->define_method(env, "**", FloatValue_pow_binding);
    Float->define_method(env, "+", FloatValue_add_binding);
    Float->define_method(env, "+@", FloatValue_uplus_binding);
    Float->define_method(env, "-", FloatValue_sub_binding);
    Float->define_method(env, "-@", FloatValue_uminus_binding);
    Float->define_method(env, "/", FloatValue_div_binding);
    Float->define_method(env, "<", FloatValue_lt_binding);
    Float->define_method(env, "<=", FloatValue_lte_binding);
    Float->define_method(env, "<=>", FloatValue_cmp_binding);
    Float->define_method(env, "==", FloatValue_eq_binding);
    Float->define_method(env, "===", FloatValue_eq_binding1);
    Float->define_method(env, ">", FloatValue_gt_binding);
    Float->define_method(env, ">=", FloatValue_gte_binding);
    Float->define_method(env, "abs", FloatValue_abs_binding);
    Float->define_method(env, "angle", FloatValue_arg_binding);
    Float->define_method(env, "arg", FloatValue_arg_binding1);
    Float->define_method(env, "ceil", FloatValue_ceil_binding);
    Float->define_method(env, "coerce", FloatValue_coerce_binding);
    Float->define_method(env, "divmod", FloatValue_divmod_binding);
    Float->define_method(env, "eql?", FloatValue_eql_binding);
    Float->define_method(env, "fdiv", FloatValue_div_binding1);
    Float->define_method(env, "finite?", FloatValue_is_finite_binding);
    Float->define_method(env, "floor", FloatValue_floor_binding);
    Float->define_method(env, "infinite?", FloatValue_is_infinite_binding);
    Float->define_method(env, "inspect", FloatValue_to_s_binding);
    Float->define_method(env, "magnitude", FloatValue_abs_binding1);
    Float->define_method(env, "modulo", FloatValue_mod_binding1);
    Float->define_method(env, "nan?", FloatValue_is_nan_binding);
    Float->define_method(env, "negative?", FloatValue_is_negative_binding);
    Float->define_method(env, "next_float", FloatValue_next_float_binding);
    Float->define_method(env, "phase", FloatValue_arg_binding2);
    Float->define_method(env, "positive?", FloatValue_is_positive_binding);
    Float->define_method(env, "prev_float", FloatValue_prev_float_binding);
    Float->define_method(env, "quo", FloatValue_div_binding2);
    Float->define_method(env, "round", FloatValue_round_binding);
    Float->define_method(env, "to_f", FloatValue_to_f_binding);
    Float->define_method(env, "to_i", FloatValue_to_i_binding);
    Float->define_method(env, "to_int", FloatValue_to_i_binding1);
    Float->define_method(env, "to_s", FloatValue_to_s_binding1);
    Float->define_method(env, "truncate", FloatValue_truncate_binding);
    Float->define_method(env, "zero?", FloatValue_is_zero_binding);
    Value *Hash = env->Object()->const_find(env, "Hash");
    Hash->define_singleton_method(env, "[]", HashValue_square_new_static_binding);
    Hash->define_method(env, "==", HashValue_eq_binding);
    Hash->define_method(env, "===", HashValue_eq_binding1);
    Hash->define_method(env, "[]", HashValue_ref_binding);
    Hash->define_method(env, "[]=", HashValue_refeq_binding);
    Hash->define_method(env, "delete", HashValue_delete_key_binding);
    Hash->define_method(env, "each", HashValue_each_binding);
    Hash->define_method(env, "initialize", HashValue_initialize_binding);
    Hash->define_method(env, "inspect", HashValue_inspect_binding);
    Hash->define_method(env, "key?", HashValue_has_key_binding);
    Hash->define_method(env, "include?", HashValue_has_key_binding1);
    Hash->define_method(env, "keys", HashValue_keys_binding);
    Hash->define_method(env, "size", HashValue_size_binding);
    Hash->define_method(env, "sort", HashValue_sort_binding);
    Hash->define_method(env, "to_s", HashValue_inspect_binding1);
    Hash->define_method(env, "values", HashValue_values_binding);
    Hash->define_method(env, "default", HashValue_default_value_binding);
    Hash->define_method(env, "default_proc", HashValue_default_proc_binding);
    Value *Integer = env->Object()->const_find(env, "Integer");
    Integer->define_method(env, "%", IntegerValue_mod_binding);
    Integer->define_method(env, "&", IntegerValue_bitwise_and_binding);
    Integer->define_method(env, "*", IntegerValue_mul_binding);
    Integer->define_method(env, "**", IntegerValue_pow_binding);
    Integer->define_method(env, "+", IntegerValue_add_binding);
    Integer->define_method(env, "-", IntegerValue_sub_binding);
    Integer->define_method(env, "/", IntegerValue_div_binding);
    Integer->define_method(env, "<=>", IntegerValue_cmp_binding);
    Integer->define_method(env, "!=", Value_neq_binding1);
    Integer->define_method(env, "<", IntegerValue_lt_binding);
    Integer->define_method(env, "<=", IntegerValue_lte_binding);
    Integer->define_method(env, ">", IntegerValue_gt_binding);
    Integer->define_method(env, ">=", IntegerValue_gte_binding);
    Integer->define_method(env, "==", IntegerValue_eq_binding);
    Integer->define_method(env, "===", IntegerValue_eqeqeq_binding);
    Integer->define_method(env, "abs", IntegerValue_abs_binding);
    Integer->define_method(env, "chr", IntegerValue_chr_binding);
    Integer->define_method(env, "coerce", IntegerValue_coerce_binding);
    Integer->define_method(env, "eql?", IntegerValue_eql_binding);
    Integer->define_method(env, "even?", IntegerValue_is_even_binding);
    Integer->define_method(env, "inspect", IntegerValue_to_s_binding);
    Integer->define_method(env, "odd?", IntegerValue_is_odd_binding);
    Integer->define_method(env, "succ", IntegerValue_succ_binding);
    Integer->define_method(env, "times", IntegerValue_times_binding);
    Integer->define_method(env, "to_i", IntegerValue_to_i_binding);
    Integer->define_method(env, "to_s", IntegerValue_to_s_binding1);
    Integer->define_method(env, "|", IntegerValue_bitwise_or_binding);
    Integer->define_method(env, "zero?", IntegerValue_is_zero_binding);
    Value *IO = env->Object()->const_find(env, "IO");
    IO->define_method(env, "close", IoValue_close_binding);
    IO->define_method(env, "fileno", IoValue_fileno_binding);
    IO->define_method(env, "initialize", IoValue_initialize_binding);
    IO->define_method(env, "print", IoValue_print_binding);
    IO->define_method(env, "puts", IoValue_puts_binding);
    IO->define_method(env, "read", IoValue_read_binding);
    IO->define_method(env, "seek", IoValue_seek_binding);
    IO->define_method(env, "write", IoValue_write_binding);
    Value *Kernel = env->Object()->const_find(env, "Kernel");
    Kernel->define_method(env, "Array", KernelModule_Array_binding);
    Kernel->define_method(env, "at_exit", KernelModule_at_exit_binding);
    Kernel->define_method(env, "block_given?", KernelModule_block_given_binding);
    Kernel->define_method(env, "class", KernelModule_klass_obj_binding);
    Kernel->define_method(env, "__dir__", KernelModule_cur_dir_binding);
    Kernel->define_method(env, "define_singleton_method", KernelModule_define_singleton_method_binding);
    Kernel->define_method(env, "dup", KernelModule_dup_binding);
    Kernel->define_method(env, "===", KernelModule_equal_binding);
    Kernel->define_method(env, "eql?", KernelModule_equal_binding1);
    Kernel->define_method(env, "exit", KernelModule_exit_binding);
    Kernel->define_method(env, "freeze", KernelModule_freeze_obj_binding);
    Kernel->define_method(env, "get_usage", KernelModule_get_usage_binding);
    Kernel->define_method(env, "hash", KernelModule_hash_binding);
    Kernel->define_method(env, "inspect", KernelModule_inspect_binding);
    Kernel->define_method(env, "instance_variable_get", KernelModule_instance_variable_get_binding);
    Kernel->define_method(env, "instance_variable_set", KernelModule_instance_variable_set_binding);
    Kernel->define_method(env, "instance_variables", KernelModule_ivars_binding);
    Kernel->define_method(env, "is_a?", KernelModule_is_a_binding);
    Kernel->define_method(env, "nil?", KernelModule_is_nil_binding);
    Kernel->define_method(env, "lambda", KernelModule_lambda_binding);
    Kernel->define_method(env, "loop", KernelModule_loop_binding);
    Kernel->define_method(env, "__method__", KernelModule_this_method_binding);
    Kernel->define_method(env, "methods", KernelModule_methods_binding);
    Kernel->define_method(env, "public_methods", KernelModule_methods_binding1);
    Kernel->define_method(env, "object_id", KernelModule_object_id_binding);
    Kernel->define_method(env, "p", KernelModule_p_binding);
    Kernel->define_method(env, "print", KernelModule_print_binding);
    Kernel->define_method(env, "proc", KernelModule_proc_binding);
    Kernel->define_method(env, "puts", KernelModule_puts_binding);
    Kernel->define_method(env, "raise", KernelModule_raise_binding);
    Kernel->define_method(env, "respond_to?", KernelModule_respond_to_binding);
    Kernel->define_method(env, "send", Value_send_binding1);
    Kernel->define_method(env, "singleton_class", KernelModule_singleton_class_obj_binding);
    Kernel->define_method(env, "sleep", KernelModule_sleep_binding);
    Kernel->define_method(env, "tap", KernelModule_tap_binding);
    Value *MatchData = env->Object()->const_find(env, "MatchData");
    MatchData->define_method(env, "size", MatchDataValue_size_binding);
    MatchData->define_method(env, "length", MatchDataValue_size_binding1);
    MatchData->define_method(env, "to_s", MatchDataValue_to_s_binding);
    MatchData->define_method(env, "[]", MatchDataValue_ref_binding);
    Value *Module = env->Object()->const_find(env, "Module");
    Module->define_method(env, "===", ModuleValue_eqeqeq_binding);
    Module->define_method(env, "alias_method", ModuleValue_alias_method_binding);
    Module->define_method(env, "ancestors", ModuleValue_ancestors_binding);
    Module->define_method(env, "attr", ModuleValue_attr_reader_binding);
    Module->define_method(env, "attr_accessor", ModuleValue_attr_accessor_binding);
    Module->define_method(env, "attr_reader", ModuleValue_attr_reader_binding1);
    Module->define_method(env, "attr_writer", ModuleValue_attr_writer_binding);
    Module->define_method(env, "class_eval", ModuleValue_module_eval_binding);
    Module->define_method(env, "const_defined?", ModuleValue_const_defined_binding);
    Module->define_method(env, "define_method", ModuleValue_define_method_binding);
    Module->define_method(env, "extend", ModuleValue_extend_binding);
    Module->define_method(env, "include", ModuleValue_include_binding);
    Module->define_method(env, "include?", ModuleValue_does_include_module_binding);
    Module->define_method(env, "included_modules", ModuleValue_included_modules_binding);
    Module->define_method(env, "inspect", ModuleValue_inspect_binding);
    Module->define_method(env, "method_defined?", ModuleValue_is_method_defined_binding);
    Module->define_method(env, "module_eval", ModuleValue_module_eval_binding1);
    Module->define_method(env, "name", ModuleValue_name_binding);
    Module->define_method(env, "prepend", ModuleValue_prepend_binding);
    Module->define_method(env, "private", ModuleValue_private_method_binding);
    Module->define_method(env, "protected", ModuleValue_protected_method_binding);
    Module->define_method(env, "public", ModuleValue_public_method_binding);
    Value *NilClass = env->Object()->const_find(env, "NilClass");
    NilClass->define_method(env, "inspect", NilValue_inspect_binding);
    NilClass->define_method(env, "to_a", NilValue_to_a_binding);
    NilClass->define_method(env, "to_i", NilValue_to_i_binding);
    NilClass->define_method(env, "to_s", NilValue_to_s_binding);
    Value *Object = env->Object()->const_find(env, "Object");
    Object->define_method(env, "nil?", Value_is_nil_binding);
    Value *Parser = env->Object()->const_find(env, "Parser");
    Parser->define_singleton_method(env, "parse", ParserValue_parse_singleton_binding);
    Value *Proc = env->Object()->const_find(env, "Proc");
    Proc->define_method(env, "initialize", ProcValue_initialize_binding);
    Proc->define_method(env, "call", ProcValue_call_binding);
    Proc->define_method(env, "lambda?", ProcValue_is_lambda_binding);
    Value *Process = env->Object()->const_find(env, "Process");
    Process->define_singleton_method(env, "pid", ProcessModule_pid_static_binding);
    Value *Range = env->Object()->const_find(env, "Range");
    Range->define_method(env, "initialize", RangeValue_initialize_binding);
    Range->define_method(env, "begin", RangeValue_begin_binding);
    Range->define_method(env, "first", RangeValue_begin_binding1);
    Range->define_method(env, "end", RangeValue_end_binding);
    Range->define_method(env, "last", RangeValue_end_binding1);
    Range->define_method(env, "exclude_end?", RangeValue_exclude_end_binding);
    Range->define_method(env, "to_a", RangeValue_to_a_binding);
    Range->define_method(env, "each", RangeValue_each_binding);
    Range->define_method(env, "inspect", RangeValue_inspect_binding);
    Range->define_method(env, "==", RangeValue_eq_binding);
    Range->define_method(env, "===", RangeValue_eqeqeq_binding);
    Range->define_method(env, "include?", RangeValue_eqeqeq_binding1);
    Value *Regexp = env->Object()->const_find(env, "Regexp");
    Regexp->define_singleton_method(env, "compile", RegexpValue_compile_static_binding);
    Regexp->define_method(env, "==", RegexpValue_eq_binding);
    Regexp->define_method(env, "===", RegexpValue_eqeqeq_binding);
    Regexp->define_method(env, "=~", RegexpValue_eqtilde_binding);
    Regexp->define_method(env, "initialize", RegexpValue_initialize_binding);
    Regexp->define_method(env, "inspect", RegexpValue_inspect_binding);
    Regexp->define_method(env, "match", RegexpValue_match_binding);
    Value *String = env->Object()->const_find(env, "String");
    String->define_method(env, "*", StringValue_mul_binding);
    String->define_method(env, "+", StringValue_add_binding);
    String->define_method(env, "<<", StringValue_ltlt_binding);
    String->define_method(env, "<=>", StringValue_cmp_binding);
    String->define_method(env, "==", StringValue_eq_binding);
    String->define_method(env, "===", StringValue_eq_binding1);
    String->define_method(env, "=~", StringValue_eqtilde_binding);
    String->define_method(env, "[]", StringValue_ref_binding);
    String->define_method(env, "bytes", StringValue_bytes_binding);
    String->define_method(env, "chars", StringValue_chars_binding);
    String->define_method(env, "encode", StringValue_encode_binding);
    String->define_method(env, "encoding", StringValue_encoding_binding);
    String->define_method(env, "eql?", StringValue_eq_binding2);
    String->define_method(env, "force_encoding", StringValue_force_encoding_binding);
    String->define_method(env, "index", StringValue_index_binding);
    String->define_method(env, "initialize", StringValue_initialize_binding);
    String->define_method(env, "inspect", StringValue_inspect_binding);
    String->define_method(env, "length", StringValue_length_binding);
    String->define_method(env, "ljust", StringValue_ljust_binding);
    String->define_method(env, "match", StringValue_match_binding);
    String->define_method(env, "ord", StringValue_ord_binding);
    String->define_method(env, "size", StringValue_size_binding);
    String->define_method(env, "split", StringValue_split_binding);
    String->define_method(env, "sub", StringValue_sub_binding);
    String->define_method(env, "succ", StringValue_successive_binding);
    String->define_method(env, "to_i", StringValue_to_i_binding);
    String->define_method(env, "to_s", StringValue_to_s_binding);
    String->define_method(env, "to_str", StringValue_to_str_binding);
    String->define_method(env, "to_sym", StringValue_to_sym_binding);
    Value *Symbol = env->Object()->const_find(env, "Symbol");
    Symbol->define_method(env, "<=>", SymbolValue_cmp_binding);
    Symbol->define_method(env, "id2name", SymbolValue_to_s_binding);
    Symbol->define_method(env, "inspect", SymbolValue_inspect_binding);
    Symbol->define_method(env, "to_proc", SymbolValue_to_proc_binding);
    Symbol->define_method(env, "to_s", SymbolValue_to_s_binding1);
    Value *TrueClass = env->Object()->const_find(env, "TrueClass");
    TrueClass->define_method(env, "inspect", TrueValue_to_s_binding);
    TrueClass->define_method(env, "to_s", TrueValue_to_s_binding1);
    Value *$NAT_main_object = env->global_get("$NAT_main_object");
    $NAT_main_object->define_singleton_method(env, "inspect", KernelModule_main_obj_inspect_singleton_binding);
    FalseClass->undefine_singleton_method(env, "new");
    Float->undefine_singleton_method(env, "new");
    Integer->undefine_singleton_method(env, "new");
    NilClass->undefine_singleton_method(env, "new");
    Symbol->undefine_singleton_method(env, "new");
    TrueClass->undefine_singleton_method(env, "new");
}

}
